#!/bin/bash
#Add color for info.
green='\e[1;32m'
red='\e[0;31m'
yellow='\e[1;33m'
SELECTED_DIR=$2
DIR="/opt/ELSM/Server"


do_startup() {
##Simple check to make sure there is actually a server built##
##############################################################
if [ -z "$SELECTED_DIR" ]; then
do_multi_check
fi

source $DIR/$SELECTED_DIR/conf.cfg
if [ ! -f $DIR/$SELECTED_DIR/EcoServer.exe ]; then
do_newserver
else
do_update
##We will now ask about ECO upgrades.
do_ECO_upgrade_check
fi
}



do_update() {
$INSTALL_LOC/Files/update.sh "${SELECTED_DIR[@]}"
}

do_no_menu_start() {
source $DIR/$SELECTED_DIR/conf.cfg
SESSIONID=$(screen -ls | awk '/\.'${SELECTED_DIR}'\t/ {print strtonum($1)}')
MONITOR="${SESSIONID}.${SELECTED_DIR}"
  if ! screen -list | grep -o "${MONITOR}"; then
     cd $INSTALL_LOC/Files/
     $WATCH_START "${SELECTED_DIR[@]}"
  else
     echo "Server is already running... Please close it before running this."
  fi
  if ! screen -list | grep -q "WATCH"; then
     cd $INSTALL_LOC/Files/
     $WATCH_START "${SELECTED_DIR[@]}"
  fi
}

do_no_menu_stop() {
source $DIR/$SELECTED_DIR/conf.cfg
SESSIONID=$(screen -ls | awk '/\.'${SELECTED_DIR}'\t/ {print strtonum($1)}')
MONITOR="${SESSIONID}.${SELECTED_DIR}"
  if screen -list | grep -o "${MONITOR}"; then
    $WATCH_STOP
    screen -S $MONITOR -p 0 -X stuff "exit $(printf \\r)"
  else
     echo "No server was found to be running... Did you start one?"
  fi
}

##Time to include a restart command..
do_restart() {
if(whiptail --fb --title "Restart Eco Server?" --yes-button "Yes" --no-button "No"  --yesno "Would You like to restart Eco?" 10 60) then
	while true; do
		if screen -list | grep -q "ECO"; then
			$STOP
			break
		else
			echo "No server was found, Starting now..."
			do_no_menu_start
		fi
done
fi
}


### List options that we want in simple edit.
do_start_advanced_config() {
unset CONFIGS LIST SEL 
CONFIGS="${DIR}/${SELECTED_DIR}/Configs"
##Get the lists!
LIST=$(ls $DIR/$SELECTED_DIR/Configs/ | awk -F. '{print $1" |"}')
SEL=$(whiptail --menu --fb "Configs Menu" --ok-button Enter --cancel-button Back 20 60 10 ${LIST[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
do_main_config
fi
}

do_world_size() {
echo "You made it to world size"
CONFIGS="${DIR}/${SELECTED_DIR}/Configs"
SEL="WorldGenerator"
WG_SIZE=$(whiptail --fb --title "World Size" --radiolist "Choose: (Spacebar to select!)" 20 60 10\
  "Little_Big_Planet" "[20x20 World]" off \
  "1X (Default)" "[100x100 World]" on \
  "2X" "[140x140 World]" off \
  "4X" "[200x200 World]" off \
  "Custom" "[Choose your world's size]" off \
  3>&1 1>&2 2>&3)
if [ "$WG_SIZE" = "Little_Big_Planet" ]; then
jq '.Dimensions.x = "20"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "20"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
if [ "$WG_SIZE" = "1X (Default)" ]; then
jq '.Dimensions.x = "100"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "100"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
if [ "$WG_SIZE" = "2X" ]; then
jq '.Dimensions.x = "140"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "140"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
if [ "$WG_SIZE" = "4X" ]; then
jq '.Dimensions.x = "200"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq '.Dimensions.y = "200"' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
if [ "$WG_SIZE" = "Custom" ]; then
size=$(whiptail --fb --title "World Size" --inputbox "Enter the world's size:" 10 60 "100" 3>&1 1>&2 2>&3)
jq ".Dimensions.x = \"${size}\"" $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
jq ".Dimensions.y = \"${size}\"" $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
fi
}

do_optimize() {
CONFIGS="${DIR}/${SELECTED_DIR}/Configs"
SEL="World"
  #Optimize Function
  echo "Optimizing Server..."
  sed -i "5 d" "$CONFIGS/World.eco" #Remove lines that we are editing
  sed -i "6 d" "$CONFIGS/World.eco" #Same as above
  sed -i '5s/^/ },\n/' "$CONFIGS/World.eco" #Add neccesary }, to the file
  sed -i '6s/^/ "WorldTickCPUMax": 0.44\n/' "$CONFIGS/World.eco" #Add WorldTickCPUMax Option and new line the bracket
  sed -i 's/60/300/g' "$CONFIGS/Storage.eco"
}

#Functions used for easy config
do_easy_config_serverDesc() {
  CONFIGS="${DIR}/${SELECTED_DIR}/Configs"
  SEL="Network"
  #Ask for server desc
  ServerName=$(whiptail --fb --title "Server Name" --inputbox "Enter the server's description" 10 60 "Eco_LinuxServer" 3>&1 1>&2 2>&3)
  exitstatus=$?
  if [ $exitstatus = 0 ]; then
    jq ".Description = \"${ServerName}\"" $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco

  else
    echo "Exited"
    exit 1
  fi
}

do_easy_config_serverPassword() {
  CONFIGS="${DIR}/${SELECTED_DIR}/Configs"
  SEL="Network"
  Password=$(whiptail --fb --title "Server Password" --inputbox "Enter server password.\n Warning: EVERYONE having this password can access this server." 10 60 "very-secure-passw0rd" 3>&1 1>&2 2>&3)
  exitstatus=$?
  if [ $exitstatus = 0 ]; then
    if ! [ -z $Password ]; then
      jq ".Password = \"${Password}\"" $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
    else
      echo "Password is empty."
      do_easy_config_serverPassword
      return
    fi
  else
    echo "Exited"
    exit 1
  fi
}

do_easy_config_serverType() {
  CONFIGS="${DIR}/${SELECTED_DIR}/Configs"
  SEL="Network"
  #Ask for server type
  Type=$(whiptail --fb --title "Server type (Spacebar to choose, enter to confirm)" --radiolist \
  "Choose your server auth type" 15 90 4 \
  "Public" "Everyone can join your server" ON \
  "Private" "Only whitelisted users can join the server" OFF \
  "Private with password" "Only users with the password can join your server" OFF 3>&1 1>&2 2>&3)
  exitstatus=$?
  if [ $exitstatus = 0 ]; then
      case $Type in
        "Public")
          jq '.PublicServer = true' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
        ;;
        "Private")
          jq '.PublicServer = false' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
        ;;
        "Private with password")
          jq '.PublicServer = false' $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
          do_easy_config_serverPassword
        ;;
      esac  
  else
    #Exit
      echo "Exited"
      exit 1
  fi
}
do_start_easy_config() {
  SEL="Network"
  CONFIGS="${DIR}/${SELECTED_DIR}/Configs"
  #Set the server's port
  Gport=$(whiptail --fb --title "Server Ports" --inputbox "Enter the server's port (For the game)" 10 60 "3000" 3>&1 1>&2 2>&3)
  exitstatus=$?
  if [ $exitstatus = 0 ]; then
    #Ask for the web port
    Wport=$(whiptail --fb --title "Server Ports" --inputbox "Enter the web server's port (Must be different)" 10 60 "3001" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 0 ]; then
    #Check if the user entered int
      if [[ $Gport =~ ^[0-9]+$ || $Wport =~ ^[0-9]+$ ]]; then
       # Check if ports is already taken
       port1=$(netstat -an | grep $Gport | grep LISTEN)
       port2=$(netstat -an | grep $Wport | grep LISTEN)
        if [[ ! -z  port1 ]]; then
          if [[ ! -z port2 ]]; then
            #Set the ports in config file
            jq ".GameServerPort = \"${Gport}\"" $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
            jq ".WebServerPort = \"${Gport}\"" $CONFIGS/$SEL.eco|sponge $CONFIGS/$SEL.eco
            do_easy_config_serverDesc
            do_easy_config_serverType
	    do_optimize
            whiptail --fb --title "Server Config" --msgbox "Server options finished !" 10 60
          else
            echo "Port already taken"
            echo "Var: \"${port1}\""
            netstat -an | grep $Gport | grep LISTEN
            sleep 5
            do_start_easy_config
            return
          fi
        else
          echo "Port already taken"
          echo "Var: \"${port1}\""
          netstat -an | grep $Gport | grep LISTEN
          sleep 5
          do_start_easy_config
          return
        fi
      else
        echo "Not a number"
        sleep 5
        do_start_easy_config
        return
      fi
    else
      echo "Exited"
      exit 1
    fi
  else
    echo "Exited"
    exit 1
  fi
  
}
do_start_config() {
  #We start with the server name
  if (whiptail --fb --title "Server install" --yesno "There are two types of installation: \n Easy: for new users, Simple to setup and manage. \n Advanced: Master your World!"  --yes-button "Basic" --no-button "Advanced" 10 60) then
    do_start_easy_config
  else
    do_start_advanced_config
  fi
}
do_main_config() {
nano $CONFIGS/$SEL.eco
do_start_advanced_config
}

do_first_run() {
(
	##Lets kill anything that even looks like the named server we are building.
	$WATCH_STOP
	$STOP
        sleep 1
        echo XXX
        echo 20
        echo "Inputing user selection"
        echo XXX
        sleep 1
        echo XXX
        echo 40
	echo "Attemping to start server"
        echo XXX
        sleep 1
        echo XXX
        echo 50
        echo "LONG WAIT, UP TO 1HOUR!!!!"
	source $DIR/$SELECTED_DIR/conf.cfg
	cd $DIR/$SELECTED_DIR/
	$START
        echo XXX
	sleep 3) | whiptail --gauge "Gathering info" 8 40 0
}
do_stagetwo() {
	clear
	screen -S $SELECTED_DIR -p 0 -X stuff "exit $(printf \\r)"
	screen -r $SELECTED_DIR 
read -p "Did the server build correctly? Y/N " -n 1 -r 
echo # (optional) move to a new line 
if [[ $REPLY =~ ^[Yy]$ ]] 
then
    	cd $INSTALL_LOC/Files/
	$WATCH_START "${SELECTED_DIR[@]}"
	do_stagethree
else
	$STOP
	$START
	sleep 3
	do_stagetwo
fi
}

do_stagethree() {

(	echo 60
        echo XXX
        echo 80
        echo "The sun is rising."
        echo XXX
        sleep 2
        echo XXX
        echo 100
        echo "Finishing up."
        echo XXX
        sleep 2
) | whiptail --gauge "Gathering info" 8 40 0
##Leave the script so we don't confuse users and attempt to start it after it's all ready up.
INTERNAL_IP=$(hostname -I | awk '{print $1}')
whiptail --msgbox --fb "Ok your server should be live for you to play now. Also don't forget to check out the WebUI at: $INTERNAL_IP:3001" 20 60 0
clear
echo -e ${green}"Ok your server should be live for you to play now. Also don't forget to check out the WebUI at: $INTERNAL_IP:3001"
echo -e ${yellow}"To run the ECO_LINUX_SERVER_MANAGER interface just type ${red}ELSM${yellow} in your terminal"
tput sgr0
}

do_start() {
SESSIONID=$(screen -ls | awk '/\.'${SELECTED_DIR}'\t/ {print strtonum($1)}')
MONITOR="${SESSIONID}.${SELECTED_DIR}"
  if ! screen -list | grep -o "${MONITOR}"; then
	cd $INSTALL_LOC/Files/
	$WATCH_START "${SELECTED_DIR[@]}"
    whiptail --fb --msgbox "Your Server is loading up please check the client after a bit of time..." 20 60 1
else
    whiptail --fb --msgbox "Found a server running please stop it first!" 20 60 1
    do_Qstop
fi
if ! screen -list | grep -o "${MONITOR}"; then
     cd $INSTALL_LOC/Files/
     $WATCH_START "${SELECTED_DIR[@]}"
fi
}


do_stop() {
SESSIONID=( $(screen -ls | awk '/\.'${SELECTED_DIR}'\t/ {print strtonum($1)}') )
MONITOR="${SESSIONID}.${SELECTED_DIR[0]}"
  if ! screen -list | grep -o "${MONITOR}"; then
    whiptail --fb --msgbox "There is no Server running right now, did you start it?" 20 60 1
else
    do_Qstop
fi
}

do_Qstop() {
 whiptail --fb --yesno "Did you want to stop the server?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    cd $DIR/$SELECTED_DIR
    $WATCH_STOP
    screen -S ${MONITOR[0]} -p 0 -X stuff "exit $(printf \\r)"
    whiptail --fb --msgbox "Stopping Server.." 20 60 1
  fi
}

do_force_kill() {
SESSIONID=( $(screen -ls | awk '/\.'${SELECTED_DIR}'\t/ {print strtonum($1)}') )
MONITOR="${SESSIONID}.${SELECTED_DIR[0]}"
$WATCH_STOP
$STOP
sleep 3
if ! screen -list | grep -o "${MONITOR}"; then
whiptail --msgbox --fb "Your server has been killed, Returning to the main menu." 20 60 0
do_menu
fi
}


do_install() {
INSTALL_LOC="/opt/ELSM"
DIR="${INSTALL_LOC}/Server"
###Grab a list and see what we can do with it##
cd $INSTALL_LOC/Files
GETLIST=$(wget -q https://raw.githubusercontent.com/kicker22004/ECO_Linux_Server_Manager/master/Files/server_version.txt -O server_version.txt)
GETLIST="${INSTALL_LOC}/Files/server_version.txt"
eco_server_list=$(cat server_version.txt | sort -r | awk '{print $1 " |"}')

SELECTED_VERSION=$(whiptail --menu --fb "Select Your ECO server." 20 60 10 ${eco_server_list[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 1 ]; then
exit 1
elif [ $RET -eq 0 ]; then
dl_link=$(echo "https://s3-us-west-2.amazonaws.com/eco-releases/$SELECTED_VERSION")
fi

r=$(wget $dl_link -O $DIR/$SELECTED_DIR/$SELECTED_VERSION)

if [ $? -ne 0 ]; then
whiptail --msgbox --clear --fb "Download failed!, check your internet connection and the link.\
The current link is: $dl_link" 20 60
fi

cd $DIR/$SELECTED_DIR
unzip $SELECTED_VERSION
rm $SELECTED_VERSION
sed -i 's/ECO_VERSION=.*/ECO_VERSION='$SELECTED_VERSION'/g' $INSTALL_LOC/Files/conf.cfg
sed -i 's/SELECTED_DIR=.*/SELECTED_DIR='$SELECTED_DIR'/g' $INSTALL_LOC/Files/conf.cfg
#Make our own config per server.
echo $SELECTED_DIR
cp $INSTALL_LOC/Files/conf.cfg $DIR/$SELECTED_DIR/

source $DIR/$SELECTED_DIR/conf.cfg
do_world_size
do_start_config
do_first_run
do_stagetwo
}

do_upgrade() {
whiptail --msgbox --fb --title "404" "This menu is going to be disabled for now, It's a bit to rushed and I would like to fine tune it more. Sorry guys i'll get to it soon." 20 60 0
}
#if screen -list | grep -q "ECO"; then
#    cd $DIR/$SELECTED_DIR
#    $WATCH_STOP
#    $STOP
#fi

#cd $INSTALL_LOC/Files
#wget -q https://raw.githubusercontent.com/kicker22004/ECO_Linux_Server_Manager/master/Files/server_version.txt -O server_version.txt 
#UPGRADE_VERSIONS=$(cat server_version.txt | sort -r | grep -n $ECO_VERSION | cut -d ":" -f1)
#UPGRADE_LIST=$(sed ''$UPGRADE_VERSIONS',$d' server_version.txt | sort -r | awk '{print $1 " |"}')
#echo "This is your Upgrade_list: $UPGRADE_LIST"

#if [ $UPGRADE_VERSIONS = "1" ]; then
#        whiptail --fb --msgbox --title "Latest Version found!" "You're currently running the latest ECO Beta, Check back later" 10 70 0
#do_menu
#else
#rm -rf $INSTALL_LOC/Backup/*
#rm $INSTALL_LOC/Archives/UPGRADE_ROLLBACK.tar.gz
#cd $INSTALL_LOC/Archives
#cp $INSTALL_LOC/Files/conf.cfg $SELECTED_DIR/
#tar -zcvf UPGRADE_ROLLBACK.tar.gz -C $SELECTED_DIR .
#tar -xf UPGRADE_ROLLBACK.tar.gz -C $INSTALL_LOC/Backup/
#rm -rf $SELECTED_DIR/*
#cd $INSTALL_LOC
#SELECTED_VERSION=$(whiptail --menu --fb "Select Your ECO server." 20 60 10 ${UPGRADE_LIST[@]} 3>&1 1>&2 2>&3)
#RET=$?
#if [ $RET -eq 1 ]; then
##Falling back
#cd $INSTALL_LOC/Archives/
#tar -xf UPGRADE_ROLLBACK.tar.gz -C $SELECTED_DIR
#whiptail --fb --msgbox --title "Emergency Recovery" "Your server was restored because you canceled" 10 60 0
#do_menu
#elif [ $RET -eq 0 ]; then
#dl_link=$(echo "https://s3-us-west-2.amazonaws.com/eco-releases/$SELECTED_VERSION")
#fi
#
#r=$(wget $dl_link -O $SELECTED_DIR/$SELECTED_VERSION)
#if [ $? -ne 0 ]; then
#whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
#The current link is: $dl_link" 20 60
#fi
#fi
#cd $SELECTED_DIR
##Grab avalible download versions from site (Linux Server only)
#unzip $SELECTED_VERSION
#rm $SELECTED_VERSION
#if [ ! -d $SELECTED_DIR/Storage ]; then
#        mkdir $SELECTED_DIR/Storage
#fi
#sed -i 's/ECO_VERSION=.*/ECO_VERSION='$SELECTED_VERSION'/g' $INSTALL_LOC/Files/conf.cfg
#cp -R $INSTALL_LOC/Backup/Storage/* $SELECTED_DIR/Storage/
#cp $INSTALL_LOC/Backup/conf.cfg $DIR/$SELECTED_DIR/


## Grabing saved configs.
#VAR=( $(ls $SELECTED_DIR/Configs/) )
#x=0
#while [ $x -le "${#VAR[@]}" ]
#do
#SELECTED="${VAR[$x]}"
#x=$(( $x + 1 ))
#if [ $x = "${#VAR[@]}" ]; then
#break
#else
#jq -s 'add' $SELECTED_DIR/Configs/$SELECTED $INSTALL_LOC/Backup/Configs/$SELECTED | sponge $SELECTED_DIR/Configs/$SELECTED
#fi
#done
#whiptail --fb --msgbox --title "Completed" "Your server is now running version: $SELECTED_VERSION" 10 60 0
#cd $DIR/$SELECTED_DIR
#$WATCH_START
#source /opt/ELSM/Files/conf.cfg
#do_menu
#}

do_restore() {
whiptail --fb --yesno "THIS IS ONLY IF YOUR UPGRADE FAILED... NOT THE SAME AS ROLLBACK!" 10 60 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
rm -rf $SELECTED_DIR/*
cd $INSTALL_LOC/Archives/
tar -xf UPGRADE_ROLLBACK.tar.gz -C $SELECTED_DIR
mv $SELECTED_DIR/conf.cfg /$INSTALL_LOC/Files/
whiptail --fb --msgbox --title "Emergency Recovery" "Your server was restored to your last backup!" 10 60 0
do_menu
fi
}

do_rollback() {
ROLLBACK=$(ls $SELECTED_DIR/Storage/Backup/ | awk '{print $1 " |"}')

if [ ! $ROLLBACK ]; then
	whiptail --msgbox --fb --title "NOTHING FOUND!" "You have no backups to fallback to." 10 60
else
	whiptail --msgbox --fb --title "Stopping ECO server" "This requires the server to be stopped, Stopping now." 10 60 0
	cd $DIR/$SELECTED_DIR
	$WATCH_STOP
        $STOP
	SELECTED_BACKUP=$(whiptail --menu --fb "Select Your ECO backup." 20 60 10 ${ROLLBACK[@]} 3>&1 1>&2 2>&3)
	RET=$?
	if [ $RET -eq 0 ]; then
		cd $SELECTED_DIR/Storage/Backup/
		cp $SELECTED_BACKUP ../Game.eco
	fi
fi
}

do_map_reset() {
whiptail --fb --yesno "This will reset your world and backups, A new world will be built... Continue?" 10 60 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
	cd $INSTALL_LOC/Files/
	$WATCH_STOP
	$STOP
	rm -rf $DIR/$SELECTED_DIR/Storage/*
	$WATCH_START
	whiptail --msgbox --fb "Your server is now Generating a new world!, please give it time." 15 60
fi
}

do_complete_wipe() {
whiptail --fb --yesno "This will completely erase your server and configs... Continue?" 10 60 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
       	cd $DIR/$SELECTED_DIR
	$WATCH_STOP
       	$STOP
       	rm -rf $SELECTED_DIR/*
	do_install
        whiptail --msgbox --fb "Your server is now Generating a new world!, please give it time." 15 60
fi
}

do_server_select() {
list=$(ls /opt/ELSM/Server/ | sort -n | awk '{print $n " |"}')
SELECTED_DIR=$(whiptail --menu --fb "Select the server you with to manage." 20 60 10 ${list[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 1 ]; then
exit 1
elif [ $RET -eq 0 ]; then
cd $DIR/$SELECTED_DIR
sed -i 's:SELECTED_DIR=.*:SELECTED_DIR='$SELECTED_DIR':g' conf.cfg

if [ ! -f  /opt/ELSM/Server/$SELECTED_DIR/conf.cfg ]; then
echo "File is missing"
cp /opt/ELSM/Files/conf.cfg /opt/ELSM/Server/$SELECTED_DIR/conf.cfg
fi
source $DIR/$SELECTED_DIR/conf.cfg
fi
}

do_newserver() {
NEW=$(whiptail --fb --title "Creating a new server!" --inputbox "Please give your server a name." 10 60 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 1 ]; then
echo "You choose to leave."
exit 1
elif [ $RET -eq 0 ]; then 
CURRENT=( $( ls /opt/ELSM/Server/ ) )
NEW=${NEW// /_}
echo $NEW
if [[ " ${CURRENT[*]} " == *" ${NEW} "* ]]; then
whiptail --msgbox --fb "This server name has already been used, Please select a different one!." 20 60 0
unset NEW
do_newserver
else
    mkdir $DIR/"${NEW}"
    SELECTED_DIR="${NEW}"
    do_install
fi
fi
}

do_multi_check() {
list=$(ls /opt/ELSM/Server/ | wc -l)
RET=$?
if [ $RET -eq 1 ]; then
exit 1
elif [ $RET -eq 0 ]; then
if [ $list == "0" ]; then
#source $INSTALL_LOC/Files/conf.cfg
do_newserver
else
if [ $list -eq "1" ]; then
SELECTED_DIR=$(ls $DIR/)
sed -i 's/SELECTED_DIR=.*/SELECTED_DIR='${SELECTED_DIR}'/g' $DIR/$SELECTED_DIR/conf.cfg
source $DIR/$SELECTED_DIR/conf.cfg
else
do_server_select
fi
fi
fi
}

do_reset_menu() {
while true; do
  FUN=$(whiptail --fb --title "Main Menu (${SELECTED_DIR}), Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 8 \
    "1 Map Reset" "[Simple world erase, Saving configs.]" \
    "2 Server Reset" "[Erase everything, including configs..]" \
  3>&1 1>&2 2>&3)
RET=$?
   if [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_map_reset ;;
      2\ *) do_complete_wipe ;;
 *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  elif [ $RET -eq 1 ]; then
  do_menu
  fi
done
}


do_upgrade_menu() {
while true; do
  FUN=$(whiptail --fb --title "Main Menu (${SELECTED_DIR}), Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 8 \
    "1 Upgrade" "[Upgrade ECO]" \
    "2 Rollback" "[Rollback from ECO backups]" \
    "3 Restore" "[Fallback to working server prior to upgrade attempt.]" \
  3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    do_menu
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_upgrade ;;
      2\ *) do_rollback ;;
      3\ *) do_restore ;;
 *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}

do_ECO_upgrade_check() {
cd $INSTALL_LOC/Files
wget -q https://raw.githubusercontent.com/kicker22004/ECO_Linux_Server_Manager/master/Files/server_version.txt -O server_version.txt
UPGRADE_VERSIONS=$(cat server_version.txt | sort -r | grep -n $ECO_VERSION | cut -d ":" -f1)
UPGRADE_LIST=$(sed ''$UPGRADE_VERSIONS',$d' server_version.txt | sort -r | awk '{print $1 " |"}')

if [ ! $UPGRADE_VERSIONS = "1" ]; then
	if (whiptail --fb --title "ECO Upgrade Notice!" --yesno "There were ECO upgrades found!, Would you like to update now?" 10 78) then
    		do_upgrade
	fi
fi
}

do_thankyou() {
#Let's get the latest list and make sure it's always up to date!.
#This is a fast addition so will probably clean it up and make it cleaner later. But it's important to get it live. Thank you guys!
cd $INSTALL_LOC/Files
wget https://raw.githubusercontent.com/kicker22004/ECO_LINUX_SERVER_MANAGER/master/Files/Thankyou.sh -O Thankyou.sh
chmod +x Thankyou.sh
./Thankyou.sh
}

do_patreon() {
whiptail --msgbox --fb "Thank you for at least looking at this link. I'll be adding a backer page if I ever get backers! https://www.patreon.com/kicker22004" 20 60 0

}

do_advanced_menu() {
while true; do
  FUN=$(whiptail --fb --title "Advanced menu" --menu "WARNING!!!"  --cancel-button Back --ok-button Select 20 80 7 \
    "1 Force stop server." "[Force the server to stop!]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_menu
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_force_kill ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
done
}

do_config_menu() {
  Choice=$(whiptail --fb --title "Main Menu (${SELECTED_DIR}), Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 11 \
    "Simple" "[For new user, a simple tool]" \
    "Advanced" "[For advanced users, a menu for editing config directly]"
  3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1]; then
    do_menu
    return
  elif [ $RET -eq 0]; then
    case "$Choice" in
    esac
  else
    echo $RET
    exit 1
  fi
}
do_easy_config_menu() {
  while true; do
    FUN=$(whiptail --fb --title "Main Menu (${SELECTED_DIR}), Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 11 \
      "1 Server Name" "[Change the description]" \
      "2 Change access permission" "[Public / Private]" \
      "3 Return" "" \
    3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      do_config_choice_menu
      return
    elif [ $RET -eq 0 ]; then
      case "$FUN" in
        1\ *) do_easy_config_serverDesc ;;
        2\ *) do_easy_config_serverType ;;
        3\ *)
        return
        ;;
  *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    else
      exit 1
    fi
  done
}

do_config_choice_menu() {
  FUN=$(whiptail --fb --title "Main Menu (${SELECTED_DIR}), Build: $ELSM_VERSION" --menu "Choose edition of config editor"  --cancel-button Exit --ok-button "Select" 20 80 11 \
    "Simple" "[For new users]" \
    "Advanced" "[For those that know what they are doing!]" \
  3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_menu
    return
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      "Simple")
        do_easy_config_menu
      ;;
      "Advanced")
        do_start_advanced_config
      ;;
    esac
  else
    exit 1
  fi
}

do_menu() {
do_startup
while true; do
  FUN=$(whiptail --fb --title "Main Menu (${SELECTED_DIR}), Build: $ELSM_VERSION" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 12 \
    "1 Start" "[Attempts to start the server]" \
    "2 Stop" "[Attempt to stop the server]" \
    "3 Restart" "[Restart the server]" \
    "4 Configs" "[Allows you to make changes to config files]" \
    "5 Server Select" "[Need to manage another server?]" \
    "6 Upgrade/Fallback" "[Upgrade ECO or fallback after failed upgrade.]" \
    "7 Server Reset menu" "[Map wipes or complete server wipes!]" \
    "8 Multi Server menu" "[Create More servers!]" \
    "9 Advanced Menu" "[Sometimes you might need more tools...]" \
    "10 Info" "[Fast information about the server.]" \
    "11 Thank you" "[Backer/Donators/Contributors]" \
    "12 Patreon Link" "[Link to Patreon page, Thank you]" \
  3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    exit 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_start ;;
      2\ *) do_stop ;;
      3\ *) do_restart ;;
      4\ *) do_config_choice_menu ;;
      5\ *) do_multi_check ;;
      6\ *) do_upgrade ;;
      7\ *) do_reset_menu ;;
      8\ *) do_newserver ;;
      9\ *) do_advanced_menu ;;
      10\ *) do_info ;;
      11\ *) do_thankyou ;;
      12\ *) do_patreon ;;
 *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}

do_info(){
if screen -list | grep -q "${SELECTED_DIR}"; then
STATUS="ONLINE"
else
STATUS="OFFLINE"
fi
on_now=$(ss -t | grep -o "$PORT" | wc -l)
#Calculate accurate CPU usage.
cpufreeedit=$(mpstat 1 1 | tail -n 1 | awk '{printf $12}')
cpufree=${cpufreeedit/,/.}
CPU=$(echo "scale=1; x=100-$cpufree; if(x<1) print 0; x" | bc)
#Gather Internal and External IP
EXTERNAL_IP=$(/usr/bin/curl -s http://mdrjr.net/ip.php)
INTERNAL_IP=$(hostname -I | awk '{print $1}')
ELSM_PID=$(lsof -Pi :$PORT -sTCP:LISTEN -t)
UPTIME=$(ps -o etime= -p $ELSM_PID)
LOAD=$(uptime | grep -o "load average.*")
RAM=$(free -mh | grep Mem | awk '{print $4}')
RAM_TOTAL=$(free -mh | grep "Mem" | awk '{print $2}')
TOTAL=$(du -sh $SELECTED_DIR | awk '{print $1}')
HDD_TOTAL=$(df -kh . | grep / | awk '{print $4}')
MONO_VERSION=$(mono -V | grep version.* | cut -d " " -f 5)
whiptail --fb --clear --title "Current server stats" --yesno --yes-button REFRESH --no-button Back \
"Server Status: $STATUS \n
ELSM Version: $ELSM_VERSION \n
Start on Boot: $startonboot \n
Server Version: $ECO_VERSION \n
Current Players Online: $on_now \n
CPU Usage is: $CPU% \n
Server Uptime: $UPTIME \n
$LOAD \n
Ram Available: "$RAM\B"(Free/Total)"$RAM_TOTAL\B" \n
Server size on disk: $TOTAL(Used/Free)$HDD_TOTAL \n
Your Mono Version is: $MONO_VERSION \n
IP: $INTERNAL_IP | Remote IP: $EXTERNAL_IP" 35 55 10
CHOICES=$?
unset TOTAL on_list CPU LOAD UPTIME RAM STATUS
  if [ $CHOICES -eq 0 ]; then
   	do_info
fi
clear
}



case "$2" in
   (*)
   SELECTED_DIR=$2
    ;;
esac

case "$1" in
   (list)
    ls $DIR/
    exit 0
    ;;
  (help)
    do_help
    exit 0
    ;;
  (start)
    do_no_menu_start
    exit 0
    ;;
  (stop)
    do_no_menu_stop
    exit 0
    ;;
 (info)
   do_info
    exit 0
    ;;
 (restart)
   do_restart
    exit 0
    ;;
  (*)
    do_menu
    exit 0
    ;;
esac
